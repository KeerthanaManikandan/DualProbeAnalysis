function [allBadTimes,badElecA,badElecB] = getCorrelograms_v2(monkeyName, allDates, datFileNumAll,probe1,probe2,chInCortexProbeA,chInCortexProbeB,probeLabelA,probeLabelB,saveFigureFlag)

if ~exist('saveFigureFlag','var') || isempty(saveFigureFlag); saveFigureFlag = 0; end 
fs              = 1e3; % Sampling frequency
params.Fs       = fs;
params.fpass    = [1 120];
params.pad      = -1;
params.tapers   = [3 5];
params.trialave = 0;
hemisphere      = 'Left';
chOutCortex     = 1:3;
chDeep          = 30:32;
gammaBand       = [30 90]; [bG,aG] = butter(3,gammaBand./(fs/2),'bandpass'); % Gamma band filtering parameters
alphaBand       = [8 12];  [bA,aA] = butter(3,alphaBand./(fs/2),'bandpass'); % Alpha band filtering parameters
badChProbeB     = [14 22];



for iDate = 5:size(allDates,1)
    clc; clear expdate datFileNum datFileName
    expDate    = allDates(iDate,:);
    datFileNum = datFileNumAll{iDate,1};
    saveFolder = ['X:\Data\' monkeyName '_SqM\' hemisphere ' Hemisphere\' expDate '\Electrophysiology\Results'];

    if ~exist([saveFolder '\AvgSpectrograms'],'dir'); [~,~] = mkdir([saveFolder '\AvgSpectrograms']); end
    if ~exist([saveFolder '\IntraProbeCorr'],'dir');  [~,~] = mkdir([saveFolder '\IntraProbeCorr']);  end
    if ~exist([saveFolder '\InterProbeCorr'],'dir');  [~,~] = mkdir([saveFolder '\InterProbeCorr']);  end
    if ~exist([saveFolder '\Transition'],'dir');      [~,~] = mkdir([saveFolder '\Transition']);      end

    for iFile = 1:length(datFileNum)
        if strcmp(expDate,'09_19_2022') && iFile == 4;  continue; end
        if strcmp(expDate,'02_07_2023') && iFile == 2; continue;  end
        if strcmp(expDate,'04_11_2023') && iFile == 10; continue; end 
    
        fileNum = datFileNum(iFile);

        disp(['Preprocessing: ' num2str(expDate) ' File: ' num2str(fileNum)]);

        % Finding bad time segments
        for iProbe = 1:2
            clear probe channls spec timeVals powTimeBin badElecThresh badChVal badTimeThresh badTimes probeLabel
            
            if isempty(probe1{fileNum,iDate}) || isempty(probe2{fileNum,iDate})
                badElecA{fileNum,iDate} = [];
                badElecB{fileNum,iDate} = [];
                continue;
            end

            switch iProbe
                case 1
                    probe     = probe1{fileNum,iDate};
                    channels  = 1:size(probe,2);
                    if ~strcmp(expDate,'08_08_2022') && ~isempty(probeLabelA{iDate,1})
                        probeLabel = probeLabelA{iDate,1}(fileNum,:);
                    else
                        probeLabel = [];
                    end
                    probeName = 'A';
                case 2
                    probe = probe2{fileNum,iDate};
                    probeName = 'B'; 
                    if ~strcmp(expDate,'08_08_2022') 
                        channels = [1:13 15:21 23:size(probe,2)];
                         if ~isempty(probeLabelB{iDate,1})
                             probeLabel = probeLabelB{iDate,1}(fileNum,:);
                         else
                             probeLabel = [];
                         end
                    else
                        badTimesB = [];
                        probeLabel = [];
                        badElecB{fileNum,iDate} = [];
                        continue;
                    end
            end

            if size(probe,2) == 33; probe(:,1) = []; channels(ismember(channels,33)) = []; end

            % Obtain the spectrogram using chronux toolbox
            [spec,timeValsSpec,freqValsSpec] = mtspecgramc(probe(:,channels),[5 2],params);
            powTimeBin = squeeze(sum(10.*log10(abs(spec)),2));
            if isempty(timeValsSpec); continue; end

            % Remove bad channel
            badChVal = [];
            if ~isempty(probeLabel) % Bad channel from previous
                if strcmp(probeLabel,'BD29')
                    channels(ismember(channels,8)) = [];
                    badChVal = [badChVal 8];
                elseif strcmp(probeLabel,'CDE1')
                    channels(ismember(channels,9)) = [];
                    badChVal = [badChVal 9];
                elseif strcmp(probeLabel,'D553')
                    channels(ismember(channels,5)) = [];
                    badChVal = [badChVal 5];
                end
            end
            badElecThresh = (median(powTimeBin,2)+5*mad(powTimeBin,1,2));
            badChVal = [badChVal channels(sum((powTimeBin>badElecThresh),1) >= floor(0.75*size(powTimeBin,1)))];

            % Remove bad time points
            if ~isempty(badChVal); channels(ismember(channels,badChVal)) = []; end
        
            badTimeInd = []; badTimes = [];
            [spec,~,~] = mtspecgramc(probe(:,channels(channels>=15)),[5 2],params);
            meanS = mean(10.*log10(abs(spec)),3,'omitnan'); % Mean across channels 15-32
            powMeanS = squeeze(sum(meanS,2));

            badTimeThresh   = (median(powMeanS,1)+4.5*mad(powMeanS,1,1));
            badTimeIndOld = floor(timeValsSpec(powMeanS>badTimeThresh))*1e3;

            if ~isempty(badTimeIndOld)
                badTimeInd =[(badTimeIndOld-1e3)'  (badTimeIndOld+1e3)']; % Taking one second before and one second after bad time segments

                for iL = 1:size(badTimeInd,1)
                    badTimes = [ badTimes badTimeInd(iL,1): badTimeInd(iL,2)];
                end
                probe(badTimes,:) = [];
            end
            badTimes = unique(badTimes);
           
            switch iProbe
                case 1
                    badTimesA               = badTimes;
                    badElecA{fileNum,iDate} = badChVal;
                case 2
                    badTimesB               = badTimes;
                    badElecB{fileNum,iDate} = badChVal;
            end
                
            % Storing the average spectrogram and its corresponding summed  
            % power over time...
             if ~exist([ saveFolder '\AvgSpectrograms\AvgSpecgram_' num2str(iFile) '_Probe' probeName '.png'],'file') ||  saveFigureFlag
                 figure('units','normalized','outerposition',[0 0 1 1]);
                 subplot(2,1,1);
                 imagesc(timeValsSpec,freqValsSpec,meanS'); colormap jet; shading interp; set(gca,'YDir','normal');
                 xlabel('Time (s)'); ylabel('Frequency (Hz)'); caxis([-60 60]); title('Spectrogram');
                 subplot(2,1,2);
                 plot(timeValsSpec,powMeanS); xlabel('Time (s)'); ylabel('Sum of powers (dB)'); hold on;
                 yline(badTimeThresh,'k',['median+' num2str(4.5) '*MAD'],'LineWidth',2);title('Sum of powers across all frequencies for a timebin')

                sgtitle(strrep([expDate ' datafile ' num2str(fileNum) ' Probe: ' probeName ],'_','\_'));
                f = gcf; exportgraphics(f,[saveFolder '\AvgSpectrograms\AvgSpecgram_' num2str(iFile) '_Probe' probeName '.png'],'Resolution',300);
                close gcf;
             end
        end

        allBadTimes{fileNum,iDate} = unique([badTimesA,badTimesB]); % Common bad time segments in both probes
        
        % Get intraprobe, interprobe correlograms and intraprobe verticals
        % for different frequencies

        chA = chInCortexProbeA{iDate}(iFile)+10; % 1mm from the transition point listed in experiment notes
        if ~strcmp(expDate,'08_08_2022')
            chB = chInCortexProbeB{iDate}(iFile)+10;
        else
            chB = 1;
        end

        
        for iBand = 1:3
            clear pA pB figTitle b a
            switch iBand 
                case 1
                    pA = probe1{fileNum,iDate};
                    pB = probe2{fileNum,iDate};
                    figTitle = 'WB';

                case 2
                    pA = filtfilt(bG,aG,probe1{fileNum,iDate});
                    pB = filtfilt(bG,aG,probe2{fileNum,iDate});
                    figTitle = 'Gamma band';

                case 3
                    pA = filtfilt(bA,aA,probe1{fileNum,iDate});
                    pB = filtfilt(bA,aA,probe2{fileNum,iDate});
                    figTitle = 'Alpha band';
            end 
            
            probeBList      = [1:13 15:21 23:32];
            if size(pA,2) == 33; pA(:,1) = []; end
            if size(pB,2) == 33; pB(:,1) = []; end
            if isempty(pA) || isempty(pB); continue; end

            % Remove bad channels
            if ~isempty(badElecA{fileNum,iDate} ); pA(:,badElecA{fileNum,iDate}) = []; end
            if ~strcmp(expDate,'08_08_2022'); pB(:,badChProbeB)= []; end % Remove bad channels from probe B
            if ~isempty(badElecB{fileNum,iDate}); pB(:,ismember(probeBList,badElecB{fileNum,iDate})) = []; probeBList(ismember(probeBList,badElecB{fileNum,iDate})) = []; end


            % Remove the bad time segments
            if ~isempty(allBadTimes{fileNum,iDate})
                pA(allBadTimes{fileNum,iDate},:) = [];
                pB(allBadTimes{fileNum,iDate},:) = [];
            end

            clear cortexChA chOutA chDeepA cortexChB chOutB chDeepB 
            cortexChA = pA(:,chA:chA+2);               % Correlating with channels that we know is inside the cortex
            chOutA    = pA(:,chOutCortex);             % Correlating with channels that we know is out of cortex
            chDeepA   = pA(:,size(pA,2)-2:size(pA,2)); % Correlating with the deepest channels

            if ~strcmp(expDate,'08_08_2022') % Condition where there is only one channel for a site (applicable for Whiskey)
                cortexChB = pB(:,chB:chB+2);
                chOutB    = pB(:,chOutCortex);
                chDeepB   = pB(:,size(pB,2)-2:size(pB,2));
            else
                cortexChB = pB;
                chOutB    = zeros(size(pB));
                chDeepB   = pB;
            end

          
            % Plot and save the intra probe correlation heatmaps...
            if ~exist([saveFolder '\IntraProbeCorr\ProbeA_File_' num2str(fileNum) '_' figTitle '.png'],'file') || ~exist([saveFolder '\IntraProbeCorr\ProbeA_File_' num2str(fileNum) '_' figTitle '.eps'],'file') ||  saveFigureFlag
                figure;
                imagesc(imgaussfilt(corr(pA,'Rows','complete'),1)); colormap jet; xticks(1:32); yticks(1:32); caxis([ 0 1]); colorbar;
                title(strrep([expDate ' Datafile ' num2str(iFile) ' Probe A - ' figTitle ],'_','\_'));
                f = gcf; exportgraphics(f,[saveFolder '\IntraProbeCorr\ProbeA_File_' num2str(fileNum) '_' figTitle '.png'],'Resolution',300);
                exportgraphics(f,[saveFolder '\IntraProbeCorr\ProbeA_File_' num2str(fileNum) '_' figTitle '.eps'],'ContentType','vector');
                close gcf;
            end            

            if ~exist([saveFolder '\IntraProbeCorr\ProbeB_File_' num2str(fileNum) '_' figTitle '.png'],'file')|| ~exist([saveFolder '\IntraProbeCorr\ProbeB_File_' num2str(fileNum) '_' figTitle '.eps'],'file') ||  saveFigureFlag
                figure;
                imagesc(imgaussfilt(corr(pB,'Rows','complete'),1)); colormap jet; xticks(1:30); yticks(1:30); caxis([ 0 1]); colorbar;
                xticklabels(probeBList); yticklabels(probeBList);title(strrep([expDate ' Datafile ' num2str(iFile) ' Probe B - ' figTitle  ],'_','\_'));
                f = gcf; exportgraphics(f,[saveFolder '\IntraProbeCorr\ProbeB_File_' num2str(fileNum) '_' figTitle '.png'],'Resolution',300);
                exportgraphics(f,[saveFolder '\IntraProbeCorr\ProbeB_File_' num2str(fileNum) '_' figTitle '.eps'],'ContentType','vector');
                close gcf;
            end

            % Get the intra probe marginals... 
            marginalA = mean(corr(pA,'Rows','complete'),2);
            marginalB = mean(corr(pB,'Rows','complete'),2);
                       

            if ~exist([saveFolder '\IntraProbeCorr\Marginal_File_' num2str(fileNum) '_' figTitle '.png'],'file') || ~exist([saveFolder '\IntraProbeCorr\ProbeA_File_' num2str(fileNum) '_' figTitle '.eps'],'file') ||  saveFigureFlag
                figure; subplot(1,2,1); 
                
                imagesc(imgaussfilt(marginalA,1)); colormap jet; yticks(1:32); caxis([0 1]);colorbar;  %caxis([ 0 max(marginalA)]); 
                title('Probe A');

                subplot(1,2,2); 
                imagesc(imgaussfilt(marginalB,1)); colormap jet; yticks(1:30);yticklabels(probeBList); caxis([0 1]); 

                colorbar; 
                title('Probe B');
                sgtitle(strrep([expDate ' Datafile ' num2str(iFile) ' ' figTitle ],'_','\_'));

                f = gcf; exportgraphics(f,[saveFolder '\IntraProbeCorr\Marginal_File_' num2str(fileNum) '_' figTitle '.png'],'Resolution',300);
                exportgraphics(f,[saveFolder '\IntraProbeCorr\Marginal_File_' num2str(fileNum) '_' figTitle '.eps'],'ContentType','vector');
                close gcf;
            end            

            % Plot and save the intra probe verticals...
            if ~exist([saveFolder '\Transition\Transition_' num2str(fileNum) '_Probe A_' figTitle '.png'],'file') || ~exist([saveFolder '\Transition\Transition_' num2str(fileNum) '_Probe A_' figTitle '.eps'],'file') ||  saveFigureFlag
                if iBand~=3
                    for iProbe = 1:2
                        clear corrIn corrOut corrDeep probeTitle in
                        switch iProbe
                            case 1
                                corrIn = corr(pA,cortexChA);
                                corrOut = corr(pA,chOutA) ;
                                corrDeep = corr(pA,chDeepA);
                                in       = chA:chA+2;
                                probeTitle = 'Probe A';
                            case 2
                                corrIn = corr(pB,cortexChB);
                                corrOut = corr(pB,chOutB) ;
                                corrDeep = corr(pB,chDeepB);
                                if ~strcmp(expDate,'08_08_2022')
                                    in = chB:chB+2;
                                else
                                    in = chB; 
                                end
                                probeTitle = 'Probe B';
                        end

                        figure;

                        subplot(1,3,1); imagesc(movmean(mean(corrIn,2,'omitnan'),5));  caxis([ 0 1]); colormap jet;
                        ylabel('Mean correlation'); title(['Ch: ' num2str(in)]);  xticks([]); yticks(1:size(corrIn,1)); colorbar;
                        if iProbe == 2; yticks(1:30); yticklabels(probeBList);end

                        subplot(1,3,2); imagesc(movmean(mean(corrOut,2,'omitnan'),5)); caxis([ 0 1]); colormap jet;
                        ylabel('Mean correlation');title( ['Ch: ' num2str(chOutCortex)]);xticks([]); yticks(1:size(corrOut,1)); colorbar;
                        if iProbe == 2; yticks(1:30); yticklabels(probeBList);end

                        subplot(1,3,3); imagesc(movmean(mean(corrDeep,2,'omitnan'),5));    caxis([0 1]); colormap jet;
                        ylabel('Mean correlation'); title(['Ch: ' num2str(chDeep)]);xticks([]); yticks(1:size(corrDeep,1)); colorbar;
                        if iProbe == 2; yticks(1:30); yticklabels(probeBList);end

                        sgtitle(strrep([expDate ' Datafile ' num2str(fileNum) ' ' probeTitle ' - ' figTitle  ],'_','\_'));

                        f = gcf; exportgraphics(f,[saveFolder '\Transition\Transition_' num2str(fileNum) '_' probeTitle '_' figTitle '.png'],'Resolution',300);
                        exportgraphics(f,[saveFolder '\Transition\Transition_' num2str(fileNum) '_' probeTitle '_' figTitle '.eps'],'ContentType','vector');
                        close gcf;

                    end
                end
            end
            
            % Plot and save the pairwise correlation heatmaps
            if ~exist([saveFolder '\InterProbeCorr\AllCh_File_' num2str(fileNum) '_' figTitle '.png'],'file') || ~exist([saveFolder '\InterProbeCorr\AllCh_File_' num2str(fileNum) '_' figTitle '.eps'],'file') ||  saveFigureFlag
                figure; imagesc(imgaussfilt(corr(pA,pB,'rows','complete'),1)); colormap jet; caxis([ 0 1]);
                title(strrep([expDate ' Datafile ' num2str(fileNum) ': Pairwise correlation -  ' figTitle],'_','\_')); xlabel('Probe B'); ylabel('Probe A'); colorbar;
                yticks(1:32); xticks(1:30); xticklabels(probeBList);
                f = gcf; exportgraphics(f,[saveFolder '\InterProbeCorr\AllCh_File_' num2str(fileNum) '_' figTitle '.png'],'Resolution',300);
                exportgraphics(f,[saveFolder '\InterProbeCorr\AllCh_File_' num2str(fileNum) '_' figTitle '.eps'],'ContentType','vector');
                close gcf;
            end
        end
    end
end
end

